#===============================================================================
# @file   CMakeLists.txt
#
# @author Fabian Barras <fabian.barras@epfl.ch>
#
# @date   Mon Sept 1 9:12:20 2014
#
# @brief  main configuration file of cRacklet Library
#
# @section LICENSE
#
# cRacklet - A spectral boundary integral method for interface fracture simulation
# Copyright (©) 2012 - 2013 Fabian Barras
#               2014 EPFL (Ecole Polytechnique Fédérale de Lausanne)
# 
# cRacklet is the result of a collaboration between the Computational Solid Mechanics 
# Laboratory (LSMS) of Ecole Polytechnique Fédérale de Lausanne (EPFL), Switzerland 
# and the Department of Aerospace Engineering of the University of Illinois at 
# Urbana-Champaign, United States of America.
# 
# cRacklet is free software: you can redistribute it and/or modify it under the terms 
# of the GNU General Public License as published by the Free Software Foundation, 
# either version 3 of the License, or (at your option) any later version.
# 
# cRacklet is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with this program.  
# If not, see <http://www.gnu.org/licenses/>.

#===============================================================================
cmake_minimum_required(VERSION 2.8)
project(cRacklet)
enable_language(CXX Fortran)

set(cRacklet_CMAKE_DIR "${cRacklet_SOURCE_DIR}/cmake")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${cRacklet_SOURCE_DIR}/cmake")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${cRacklet_SOURCE_DIR}/cmake/Modules")
set(CMAKE_CXX_FLAGS "-std=c++0x" CACHE STRING "" FORCE)

set(BUILD_SHARED_LIBS ON CACHE BOOL "Build shared libraries.")
mark_as_advanced(BUILD_SHARED_LIBS)

#===============================================================================
# Release file target
#===============================================================================
set(GET_RELEASE_INFO ${PROJECT_SOURCE_DIR}/get_release_info.sh)
set(RELEASE_FILE ${PROJECT_BINARY_DIR}/release.cc)
set_property(SOURCE ${RELEASE_FILE} PROPERTY GENERATED 1)

find_program(uuencode_exec "uuencode")
mark_as_advanced(uuencode_exec)

#if(uuencode_exec)
add_custom_command(
  OUTPUT ${RELEASE_FILE}
  COMMAND ${GET_RELEASE_INFO} ${PROJECT_BINARY_DIR} > ${RELEASE_FILE}
  DEPENDS ${cRacklet_SRC} ${GET_RELEASE_INFO}
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
  COMMENT "Generating the Release file"
  )

#else()
#  message("install uuencode on the building machine to have access to release information.")
#  file(WRITE "${RELEASE_FILE}" 
#    "
#   #include <string>
#  std::string lm_release_info =  \" install uuencode on the building machine to have access to release information.\";
#")
#endif()

add_custom_target(RELEASE_INFO DEPENDS ${RELEASE_FILE})


#===============================================================================
# Library
#===============================================================================
add_subdirectory(src)

option(CRACKLET_TESTS "Activate tests" OFF)
option(CRACKLET_SIMULATIONS "Activate simulations" ON)

if(CRACKLET_TESTS)
  enable_testing()
  include(CTest)
  include(cRackletTests)
  mark_as_advanced(BUILD_TESTING)
  add_subdirectory(tests)
endif()

if(CRACKLET_SIMULATIONS)
  add_subdirectory(sim)
endif()

