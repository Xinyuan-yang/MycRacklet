#include "data_register.hh"
/* -------------------------------------------------------------------------- */
// Static members should be defined in a source file
std::string DataRegister::output_dir;
std::ofstream DataRegister::out_summary;
std::ofstream DataRegister::out_parameters;
std::map<DataFields,DataTypes> DataRegister::datas;

/* -------------------------------------------------------------------------- */
void DataRegister::data_initialize(const std::string output_folder,
				   const std::string description) {

  output_dir=output_folder;
  
  extern std::string cR_release_info;
  
  out_summary.open(output_folder+"Simulation_Summary.cra");

  out_summary << " ** This file is automatically generated by cRacklet ** " << std::endl;
  out_summary << std::endl;
  out_summary << " Thank you for using cRacklet !" << std::endl;
  out_summary << " Hereunder is a summary of your last simulation " << std::endl;
  out_summary << std::endl;
  out_summary << "/* -------------------------------------------------------------------------- */ "; 
  out_summary << std::endl;
  out_summary << " * Simulation Description: " << description << std::endl;
  out_summary << std::endl;
  out_summary << " * Date and Time:  " << getCurrentDaytime() << std::endl;
  out_summary << " * Sources information: " << std::endl;
  out_summary << cR_release_info << std::endl;
  
  out_parameters.open(output_folder+"Parameters.cra");
}

/* -------------------------------------------------------------------------- */
const DataTypes DataRegister::readData(DataFields my_field) {
  return datas[my_field];
}

/* -------------------------------------------------------------------------- */
void DataRegister::data_finalize() {

  out_summary << std::endl;
  out_summary << "/* -------------------------------------------------------------------------- */ "; 
  out_summary << std::endl;
  out_summary << " Thank you for using cRacklet, hope to see you soon.";
 
  out_summary.close();
  out_parameters.close();
}
/* -------------------------------------------------------------------------- */
std::string DataRegister::getCurrentDaytime() {
  
  time_t rawtime;
  struct tm * timeinfo;

  time (&rawtime);
  timeinfo = localtime(&rawtime);

  return asctime(timeinfo);

}

/* -------------------------------------------------------------------------- */

